:orphan:

.. _qs_datasources:

============================
Using Different Data Sources
============================

MapServer supports many vector data formats other than ESRI's Shapefile format
that we've been using so far. Support for a huge range of data sources is possible 
thanks to OGR library (a part of the GDAL software package). Please visit the GDAL project web
site at `<http://gdal.osgeo.org/>`_ and read `<http://gdal.osgeo.org/ogr/>`_ to
learn more about the different vector formats MapServer supports. In addition,
Jeff McKenna and Tyler Mitchell have written a detailed :ref:`guide to using
vector data for MapServer <vector>`.

Live Example
------------

Once you have successfully configured your local MapServer you can update the two text boxes
below with your own web server address, and path to your mapfile.

The results should look the same as below, which is running from a live demo server, with
the data displayed in an `OpenLayers3 map <http://openlayers.org/>`_

.. raw:: html
	:file: datasources.html

Shapefile
---------

The Shapefile format is the data format we used until now. It is a collection of 
several files, once of which ends with the ``shp`` extension. To use a Shapefile, you
must pass its path to the ``DATA`` keyword. You can provide an absolute path
(i.e. "/ms4w/apps/tutorial/data" or "C:/ms4w/apps/tutorial/data") or a path
relative to your mapfile's location (in this example, you'd use "../data"). This
path doesn't have to be web accessible, and shouldn't be unless you
want to allow people to download your raw data. Just make sure that the user running the
web server (usually "nobody" or "apache" in the \*nix world) has *read* access to the
Shapefile.

SpatiaLite
----------

SpatiaLite is the spatial extension to SQLite, a self-contained SQL database that can be
embedded in an application, or easily copied between computers. 
To add a layer from a SpatiaLite database, use the layer configuration below:

.. literalinclude:: datasources_spatialite.map
   :language: mapfile
   :start-after: # START SPATIALLITE LAYER
   :end-before: # END SPATIAL LITE LAYER
   :dedent: 4

To connect to a SpatiaLite database MapServer needs:

- the connection type - specified by ``CONNECTIONTYPE OGR``. ``OGR`` means
  MapServer relies on the GDAL library to read the data.
- the location of the SQLite file given as a parameter to the ``CONNECTION``
  keyword. As with Shapefiles you can provide absolute paths
  or paths relative to your mapfile's location. 
- the name of the table in which the relevant data is located. You must pass
  this name to the ``DATA`` keyword.

You can find more information on the :ref:`MapServer SQLite documentation page
<sqlite>`.


PostGIS
-------

PostGIS is the spatial extension for the PostgreSQL database. To test this section, you will
need a running PostgreSQL server with the PostGIS extension. To add a PostGIS
layer, use the layer configuration below:

.. literalinclude:: datasources_postgis.map
   :language: mapfile
   :start-after: # START POSTGIS LAYER
   :end-before: # END POSTGIS LAYER
   :dedent: 4

To connect to a PostGIS database MapServer needs:

- the type of the connection specified by ``CONNECTIONTYPE POSTGIS``.
- the connection information to connect to the database given as a parameter to
  the ``CONNECTION`` keyword. You must specify the ``dbname`` (name of your
  database), ``user`` (name of the user used to connect to the database). You
  will most likely have to also specify the ``password`` for the user.
- a SQL like query that returns the row with the data you want to display. Its more
  minimal expression is ``<column_name> FROM <table_name>`` where you must
  replace ``<column_name>`` by the name of the column holding your spatial data
  (here ``geom``) and ``<table_name>`` by the name of the table (here
  ``countries``).

You can find more information on the :ref:`MapServer PostGIS documentation page
<input_postgis>`.


:ref:`Back to tutorial index <tutorial>` | :ref:`Back to previous tutorial <qs_raster>` | :ref:`Proceed to next tutorial <qs_projections>`
